// --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
let currentSection = 'general';
let portfolioData = { items: [] };
let futureData = { items: [] };
let featuresConfig = {};
let currentProjectIndex = -1;
let currentProjectStatus = 'active';
let currentTechnologies = [];
let changesCount = 0;
let currentProjectImages = [];
let projectStatuses = [
    { 
        id: 'active', 
        name: '–ê–∫—Ç–∏–≤–µ–Ω', 
        icon: '‚úÖ', 
        description: '–ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤',
        color: '#10b981',
        bgColor: '#064e3b'
    },
    { 
        id: 'coming-soon', 
        name: '–°–∫–æ—Ä–æ', 
        icon: 'üöÄ', 
        description: '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        color: '#8b5cf6',
        bgColor: '#581c87'
    },
    { 
        id: 'paused', 
        name: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 
        icon: '‚è∏Ô∏è', 
        description: '–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω',
        color: '#f59e0b',
        bgColor: '#92400e'
    }
];

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
document.addEventListener('DOMContentLoaded', async function() {
    console.log('Admin panel –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    await loadAllData();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤
    initializeStatusSelector();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    initializeAutoSave();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateDashboardStats();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    initializeTechnologies();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏
    displayTags();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤
    renderStatusSelector();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ–∫—Ü–∏—é
    showSection('general');
});

// --- –ù–ê–í–ò–ì–ê–¶–ò–Ø ---
function showSection(sectionId) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–µ–∫—Ü–∏—é:', sectionId);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.section').forEach(el => el.classList.remove('active'));
    document.querySelectorAll('.nav-item').forEach(el => el.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    const section = document.getElementById(sectionId);
    if (section) {
        section.classList.add('active');
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é
    document.querySelectorAll('.nav-item').forEach(item => {
        if (item.onclick && item.onclick.toString().includes(`'${sectionId}'`)) {
            item.classList.add('active');
        }
    });
    
    currentSection = sectionId;
}

// --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
async function loadAllData() {
    try {
        await loadData('general');
        await loadData('hero');
        await loadData('about');
        await loadData('contact');
        await loadData('portfolio');
        await loadData('features');
        await loadData('future');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

async function loadData(section) {
    try {
        const response = await fetch(`/api/${section}`);
        if (response.ok) {
            const data = await response.json();
            displayData(section, data);
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${section}:`, error);
    }
}

// --- –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–ê–ù–ù–´–• ---
function displayData(section, data) {
    switch(section) {
        case 'general':
            setInputValue('site-title', data.title);
            setInputValue('site-lang', data.lang);
            break;
            
        case 'hero':
            setInputValue('hero-title', data.title);
            setInputValue('hero-description', data.description);
            setInputValue('hero-btn1-text', data.button1_text);
            setInputValue('hero-btn1-link', data.button1_link);
            setInputValue('hero-btn2-text', data.button2_text);
            setInputValue('hero-btn2-link', data.button2_link);
            break;
            
        case 'about':
            setInputValue('about-text1', data.text1);
            setInputValue('about-text2', data.text2);
            break;
            
        case 'portfolio':
            displayProjects(data.items || []);
            updateDashboardStats();
            break;
            
        case 'future':
            futureData = data;
            displayFutureProjects(data.items || []); // –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            updateDashboardStats();
            break;
            
        case 'contact':
            setInputValue('contact-email', data.email);
            setInputValue('contact-phone', data.phone);
            setInputValue('contact-address', data.address);
            break;
            
        case 'features':
            featuresConfig = data;
            displayFeatures(data);
            break;
    }
}

function setInputValue(id, value) {
    const element = document.getElementById(id);
    if (element && value !== undefined) {
        element.value = value;
    }
}

// --- –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø ---
async function saveData(section, data) {
    try {
        const response = await fetch(`/api/${section}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        if (response.ok) {
            showNotification('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'success');
            changesCount++;
            updateDashboardStats();
        } else {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
    }
}

async function saveGeneral() {
    const data = {
        title: document.getElementById('site-title').value,
        lang: document.getElementById('site-lang').value
    };
    await saveData('general', data);
}

async function saveHero() {
    const data = {
        title: document.getElementById('hero-title').value,
        description: document.getElementById('hero-description').value,
        button1_text: document.getElementById('hero-btn1-text').value,
        button1_link: document.getElementById('hero-btn1-link').value,
        button2_text: document.getElementById('hero-btn2-text').value,
        button2_link: document.getElementById('hero-btn2-link').value
    };
    await saveData('hero', data);
}

async function saveAbout() {
    const data = {
        text1: document.getElementById('about-text1').value,
        text2: document.getElementById('about-text2').value
    };
    await saveData('about', data);
}

async function saveContact() {
    const data = {
        email: document.getElementById('contact-email').value,
        phone: document.getElementById('contact-phone').value,
        address: document.getElementById('contact-address').value
    };
    await saveData('contact', data);
}

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–¢–§–û–õ–ò–û ---
function displayProjects(items) {
    const container = document.getElementById('projects-list');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (!items || items.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <p>–ü—Ä–æ–µ–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                <button class="btn btn-primary" onclick="addProject()">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç</button>
            </div>
        `;
        return;
    }
    
    portfolioData.items = items;
    
    items.forEach((project, index) => {
        const card = document.createElement('div');
        card.className = 'project-card';
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞
        const statusConfig = getStatusConfigAdmin(project.status || 'active');
        const projectStatus = project.status || 'active';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Ç–µ–≥–æ–≤
        const tagsHTML = project.tags && project.tags.length > 0 
            ? project.tags.slice(0, 3).map(tag => `<span class="tag-mini">${tag}</span>`).join('')
            : '<span class="tag-mini no-tags">–ë–µ–∑ —Ç–µ–≥–æ–≤</span>';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        const techHTML = project.technologies && project.technologies.length > 0 
            ? project.technologies.slice(0, 4).map(tech => `<span class="tech-mini">${tech.icon}</span>`).join('')
            : '<span class="tech-mini">üåê</span>';
        
        // –ë–µ–π–¥–∂ —Å—Ç–∞—Ç—É—Å–∞
        const statusBadge = projectStatus !== 'active' 
            ? `<div class="status-badge" style="background: ${statusConfig.color};">${statusConfig.icon} ${statusConfig.name}</div>`
            : `<div class="status-badge active-status">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</div>`;
        
        card.innerHTML = `
            <div class="project-card-header">
                <h3 class="project-title">${project.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                ${statusBadge}
            </div>
            <div class="project-card-content">
                <p class="project-description">${(project.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è').slice(0, 80)}${(project.description || '').length > 80 ? '...' : ''}</p>
                <div class="project-meta">
                    <div class="project-category">
                        <span class="category-badge category-${project.category || 'web'}">${getCategoryName(project.category)}</span>
                    </div>
                    <div class="project-tech">
                        ${techHTML}
                        ${project.technologies && project.technologies.length > 4 ? `<span class="tech-count">+${project.technologies.length - 4}</span>` : ''}
                    </div>
                </div>
                <div class="project-tags">
                    ${tagsHTML}
                    ${project.tags && project.tags.length > 3 ? `<span class="tag-count">+${project.tags.length - 3}</span>` : ''}
                </div>
            </div>
            <div class="project-actions">
                <button class="btn btn-primary btn-sm" onclick="editProject(${index})">
                    <span>‚úèÔ∏è</span> –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
                <button class="btn btn-danger btn-sm" onclick="deleteProject(${index})">
                    <span>üóëÔ∏è</span> –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        `;
        container.appendChild(card);
    });
}

function addProject() {
    currentProjectIndex = -1;
    currentTags = [];
    currentProjectImages = [];
    currentProjectStatus = 'active'; // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    setProjectStatus('active'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ UI
    currentTechnologies = [
        { name: 'HTML', icon: 'üåê' },
        { name: 'CSS', icon: 'üé®' },
        { name: 'JavaScript', icon: '‚ö°' }
    ];
    
    document.getElementById('project-title').value = '';
    document.getElementById('project-category').value = 'web';
    document.getElementById('project-description').value = '';
    document.getElementById('project-link').value = '#';
    
    displayTags();
    displayTechnologies();
    updateProjectImagesPreview();
    renderStatusSelector();
    
    document.getElementById('project-editor').style.display = 'block';
}

function editProject(index) {
    currentProjectIndex = index;
    const project = portfolioData.items[index];
    
    document.getElementById('project-title').value = project.title || '';
    document.getElementById('project-category').value = project.category || 'web';
    document.getElementById('project-description').value = project.description || '';
    document.getElementById('project-link').value = project.link || '#';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    currentProjectImages = project.images || [];
    updateProjectImagesPreview();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏
    currentTags = project.tags || [];
    displayTags();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
    currentProjectStatus = project.status || 'active';
    setProjectStatus(currentProjectStatus);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)
    currentTechnologies = project.technologies || [
        { name: 'HTML', icon: 'üåê' },
        { name: 'CSS', icon: 'üé®' },
        { name: 'JavaScript', icon: '‚ö°' }
    ];
    displayTechnologies();
    renderStatusSelector();
    
    document.getElementById('project-editor').style.display = 'block';
}

function deleteProject(index) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?')) {
        portfolioData.items.splice(index, 1);
        savePortfolio();
        displayProjects(portfolioData.items);
    }
}

function saveProject() {
    const project = {
        title: document.getElementById('project-title').value,
        category: document.getElementById('project-category').value,
        description: document.getElementById('project-description').value,
        tags: currentTags,
        technologies: currentTechnologies,
        images: currentProjectImages,
        link: document.getElementById('project-link').value || '#',
        longDescription: document.getElementById('project-description').value,
        status: currentProjectStatus // –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    };
    
    if (currentProjectIndex === -1) {
        portfolioData.items.push(project);
    } else {
        portfolioData.items[currentProjectIndex] = project;
    }
    
    savePortfolio();
    displayProjects(portfolioData.items);
    cancelProject();
}

function cancelProject() {
    document.getElementById('project-editor').style.display = 'none';
}

async function savePortfolio() {
    await saveData('portfolio', portfolioData);
}

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–£–î–£–©–ò–ú–ò –ü–†–û–ï–ö–¢–ê–ú–ò ---
function displayFutureProjects(items) {
    const container = document.getElementById('future-projects-list');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (!items || items.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <p>–ë—É–¥—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                <button class="btn btn-primary" onclick="addFutureProject()">–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω</button>
            </div>
        `;
        return;
    }
    
    futureData.items = items;
    
    items.forEach((project, index) => {
        const card = document.createElement('div');
        card.className = 'future-project-card';
        card.style.cssText = `
            background: var(--bg-card);
            border: 1px solid var(--border-primary);
            border-radius: var(--radius-lg);
            padding: 20px;
            margin-bottom: 16px;
            transition: var(--transition);
        `;
        
        card.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;">
                <h3 style="margin: 0; font-size: 18px; font-weight: 600;">${project.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                <div style="background: var(--accent-primary); color: white; padding: 4px 8px; border-radius: 12px; font-size: 11px;">
                    ${project.date || '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                </div>
            </div>
            <p style="color: var(--text-secondary); margin-bottom: 16px; line-height: 1.4;">
                ${project.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
            </p>
            <div class="future-project-actions" style="display: flex; gap: 8px;">
                <button class="btn btn-primary btn-sm" onclick="editFutureProject(${index})">
                    <span>‚úèÔ∏è</span> –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
                <button class="btn btn-danger btn-sm" onclick="deleteFutureProject(${index})">
                    <span>üóëÔ∏è</span> –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        `;
        
        container.appendChild(card);
    });
}

let currentFutureProjectIndex = -1;

function addFutureProject() {
    currentFutureProjectIndex = -1;
    
    document.getElementById('future-title').value = '';
    document.getElementById('future-date').value = '';
    document.getElementById('future-description').value = '';
    
    document.getElementById('future-editor').style.display = 'block';
}

function editFutureProject(index) {
    currentFutureProjectIndex = index;
    const project = futureData.items[index];
    
    document.getElementById('future-title').value = project.title || '';
    document.getElementById('future-date').value = project.date || '';
    document.getElementById('future-description').value = project.description || '';
    
    document.getElementById('future-editor').style.display = 'block';
}

function deleteFutureProject(index) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–Ω?')) {
        futureData.items.splice(index, 1);
        saveFutureProjects();
        displayFutureProjects(futureData.items);
    }
}

function saveFutureProject() {
    const project = {
        title: document.getElementById('future-title').value,
        date: document.getElementById('future-date').value,
        description: document.getElementById('future-description').value
    };
    
    if (currentFutureProjectIndex === -1) {
        futureData.items.push(project);
    } else {
        futureData.items[currentFutureProjectIndex] = project;
    }
    
    saveFutureProjects();
    displayFutureProjects(futureData.items);
    cancelFutureProject();
}

function cancelFutureProject() {
    document.getElementById('future-editor').style.display = 'none';
}

async function saveFutureProjects() {
    await saveData('future', futureData);
    updateDashboardStats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
}

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–Ø–ú–ò ---
function displayFeatures(features) {
    const container = document.getElementById('features-list');
    if (!container) return;
    
    container.innerHTML = '';
    
    const featuresList = [
        { key: 'about', name: '–†–∞–∑–¥–µ–ª "–û —Å–µ–±–µ"' },
        { key: 'portfolio', name: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ' },
        { key: 'future', name: '–ë—É–¥—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã' },
        { key: 'contact', name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' },
        { key: 'filter', name: '–§–∏–ª—å—Ç—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ' },
        { key: 'form', name: '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏' }
    ];
    
    featuresList.forEach(feature => {
        const status = features[feature.key] !== false;
        const control = document.createElement('div');
        control.className = 'feature-control';
        control.innerHTML = `
            <label>
                <input type="checkbox" ${status ? 'checked' : ''} 
                       onchange="toggleFeature('${feature.key}', this.checked)">
                ${feature.name}
            </label>
        `;
        container.appendChild(control);
    });
}

function toggleFeature(key, enabled) {
    featuresConfig[key] = enabled;
}

async function saveFeatures() {
    await saveData('features', featuresConfig);
}

// --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---
function updateDashboardStats() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    const portfolioCount = document.getElementById('dashboard-portfolio-count');
    if (portfolioCount) {
        portfolioCount.textContent = portfolioData.items ? portfolioData.items.length : 0;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const futureCount = document.getElementById('dashboard-future-count');
    if (futureCount) {
        futureCount.textContent = futureData.items ? futureData.items.length : 0;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const changesCountEl = document.getElementById('dashboard-changes-count');
    if (changesCountEl) {
        changesCountEl.textContent = changesCount;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –º–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const portfolioMenuCount = document.getElementById('portfolio-count');
    if (portfolioMenuCount) {
        portfolioMenuCount.textContent = portfolioData.items ? portfolioData.items.length : 0;
    }
    
    const futureMenuCount = document.getElementById('future-count');
    if (futureMenuCount) {
        futureMenuCount.textContent = futureData.items ? futureData.items.length : 0;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const futureBadge = document.getElementById('future-badge');
    if (futureBadge) {
        const count = futureData.items ? futureData.items.length : 0;
        futureBadge.textContent = count === 0 ? '0 –ø–ª–∞–Ω–æ–≤' : 
                                count === 1 ? '1 –ø–ª–∞–Ω' : 
                                count < 5 ? `${count} –ø–ª–∞–Ω–∞` : `${count} –ø–ª–∞–Ω–æ–≤`;
    }
}

// --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ---
function showNotification(message, type = 'success') {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    let container = document.getElementById('notification-container');
    if (!container) {
        container = document.createElement('div');
        container.id = 'notification-container';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            pointer-events: none;
        `;
        document.body.appendChild(container);
    }
    
    const notification = document.createElement('div');
    notification.className = `custom-notification notification-${type}`;
    
    // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const icons = {
        success: '‚úì',
        error: '‚úï',
        warning: '‚ö†',
        info: '‚Ñπ'
    };
    
    // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    const colors = {
        success: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
        error: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
        warning: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
        info: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)'
    };
    
    notification.innerHTML = `
        <div class="notification-icon">${icons[type] || icons.info}</div>
        <div class="notification-content">
            <div class="notification-message">${message}</div>
        </div>
        <div class="notification-progress"></div>
    `;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        display: flex;
        align-items: center;
        gap: 12px;
        min-width: 300px;
        max-width: 400px;
        margin-bottom: 10px;
        padding: 16px 20px;
        background: ${colors[type] || colors.info};
        color: white;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(255, 255, 255, 0.1);
        font-family: 'Inter', sans-serif;
        font-size: 14px;
        font-weight: 500;
        position: relative;
        overflow: hidden;
        transform: translateX(400px);
        transition: transform 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
        pointer-events: all;
        cursor: pointer;
    `;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏
    const iconEl = notification.querySelector('.notification-icon');
    iconEl.style.cssText = `
        width: 32px;
        height: 32px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        font-weight: bold;
        flex-shrink: 0;
    `;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentEl = notification.querySelector('.notification-content');
    contentEl.style.cssText = `
        flex: 1;
        line-height: 1.5;
    `;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    const progressEl = notification.querySelector('.notification-progress');
    progressEl.style.cssText = `
        position: absolute;
        bottom: 0;
        left: 0;
        height: 3px;
        background: rgba(255, 255, 255, 0.5);
        border-radius: 0 0 12px 12px;
        animation: notificationProgress 3s linear forwards;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if (!document.getElementById('notification-styles')) {
        const styles = document.createElement('style');
        styles.id = 'notification-styles';
        styles.textContent = `
            @keyframes notificationProgress {
                from { width: 100%; }
                to { width: 0%; }
            }
            
            .custom-notification:hover {
                transform: translateX(-10px) !important;
            }
            
            .custom-notification:hover .notification-progress {
                animation-play-state: paused;
            }
        `;
        document.head.appendChild(styles);
    }
    
    container.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 10);
    
    // –ö–ª–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    notification.addEventListener('click', () => {
        notification.style.transform = 'translateX(400px)';
        setTimeout(() => notification.remove(), 300);
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    const autoRemoveTimeout = setTimeout(() => {
        notification.style.transform = 'translateX(400px)';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
    
    // –ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    notification.addEventListener('mouseenter', () => {
        clearTimeout(autoRemoveTimeout);
    });
}

// --- –£–¢–ò–õ–ò–¢–´ ---
function toggleGradient() {
    const toggle = document.getElementById('gradient-toggle');
    const colors = document.getElementById('gradient-colors');
    
    if (toggle && colors) {
        toggle.classList.toggle('active');
        colors.style.display = toggle.classList.contains('active') ? 'flex' : 'none';
    }
}

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê–ú–ò –ü–†–û–ï–ö–¢–û–í ---
function selectProjectStatus(status) {
    currentProjectStatus = status;
    console.log('–í—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å:', status);
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π
    renderStatusSelector();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${getStatusName(status)}`, 'success');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å–∞
function getStatusName(statusId) {
    const allStatuses = [...projectStatuses];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ localStorage
    try {
        const savedStatuses = localStorage.getItem('projectStatuses');
        if (savedStatuses) {
            const customStatuses = JSON.parse(savedStatuses);
            allStatuses.push(...customStatuses);
        }
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    }
    
    const status = allStatuses.find(s => s.id === statusId);
    return status ? status.name : statusId;
}

function renderStatusSelector() {
    const container = document.querySelector('.status-selector');
    if (!container) return;
    
    container.innerHTML = '';
    
    projectStatuses.forEach(status => {
        const statusEl = document.createElement('div');
        statusEl.className = 'status-option';
        statusEl.setAttribute('data-status', status.id);
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ innerHTML
        statusEl.addEventListener('click', function(e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
            if (e.target.tagName === 'BUTTON') return;
            selectProjectStatus(status.id);
        });
        
        if (status.id === currentProjectStatus) {
            statusEl.classList.add('active');
        }
        
        const isActive = status.id === currentProjectStatus;
        
        statusEl.style.cssText = `
            padding: 16px;
            border: 2px solid ${isActive ? status.color : 'transparent'};
            border-radius: var(--radius-md);
            background: ${isActive ? status.color + '20' : 'var(--bg-tertiary)'};
            cursor: pointer;
            text-align: center;
            transition: var(--transition);
            position: relative;
            box-shadow: ${isActive ? '0 4px 12px ' + status.color + '40' : 'none'};
        `;
        
        statusEl.innerHTML = `
            ${isActive ? '<div style="position: absolute; top: 4px; left: 4px; color: ' + status.color + '; font-size: 16px;">‚úì</div>' : ''}
            <div style="font-size: 20px; margin-bottom: 8px;">${status.icon}</div>
            <div style="font-weight: 600; color: var(--text-primary);">${status.name}</div>
            <div style="font-size: 12px; color: var(--text-secondary);">${status.description}</div>
            ${isActive ? '<div style="margin-top: 8px; font-size: 10px; color: ' + status.color + '; font-weight: 600;">–í–´–ë–†–ê–ù</div>' : ''}
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        if (status.id !== 'active' && status.id !== 'coming-soon') {
            const deleteBtn = document.createElement('button');
            deleteBtn.innerHTML = '√ó';
            deleteBtn.style.cssText = `
                position: absolute;
                top: 4px;
                right: 4px;
                background: var(--accent-error);
                color: white;
                border: none;
                border-radius: 50%;
                width: 20px;
                height: 20px;
                font-size: 12px;
                cursor: pointer;
                display: none;
            `;
            deleteBtn.onclick = (e) => {
                e.stopPropagation();
                deleteStatus(status.id);
            };
            statusEl.appendChild(deleteBtn);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            statusEl.addEventListener('mouseenter', () => {
                deleteBtn.style.display = 'flex';
                deleteBtn.style.alignItems = 'center';
                deleteBtn.style.justifyContent = 'center';
            });
            statusEl.addEventListener('mouseleave', () => {
                deleteBtn.style.display = 'none';
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã hover –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        statusEl.addEventListener('mouseenter', function() {
            if (!this.classList.contains('active')) {
                this.style.borderColor = status.color + '60';
                this.style.background = status.color + '10';
                this.style.transform = 'translateY(-2px)';
                this.style.boxShadow = '0 4px 12px rgba(0,0,0,0.2)';
            }
        });
        
        statusEl.addEventListener('mouseleave', function() {
            if (!this.classList.contains('active')) {
                this.style.borderColor = 'transparent';
                this.style.background = 'var(--bg-tertiary)';
                this.style.transform = 'translateY(0)';
                this.style.boxShadow = 'none';
            }
        });
        
        container.appendChild(statusEl);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    const addBtn = document.createElement('div');
    addBtn.className = 'status-option add-status';
    addBtn.style.cssText = `
        padding: 16px;
        border: 2px dashed var(--border-primary);
        border-radius: var(--radius-md);
        background: transparent;
        cursor: pointer;
        text-align: center;
        transition: var(--transition);
        color: var(--text-secondary);
    `;
    addBtn.innerHTML = `
        <div style="font-size: 20px; margin-bottom: 8px;">‚ûï</div>
        <div style="font-weight: 600;">–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</div>
        <div style="font-size: 12px;">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π</div>
    `;
    addBtn.onclick = createNewStatus;
    
    addBtn.addEventListener('mouseenter', () => {
        addBtn.style.borderColor = 'var(--accent-primary)';
        addBtn.style.color = 'var(--accent-primary)';
    });
    addBtn.addEventListener('mouseleave', () => {
        addBtn.style.borderColor = 'var(--border-primary)';
        addBtn.style.color = 'var(--text-secondary)';
    });
    
    container.appendChild(addBtn);
}

function createNewStatus() {
    const modal = document.createElement('div');
    modal.className = 'status-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        backdrop-filter: blur(10px);
    `;
    
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: var(--bg-card);
        border: 1px solid var(--border-primary);
        border-radius: var(--radius-lg);
        padding: 32px;
        max-width: 500px;
        width: 90%;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
    `;
    
    modalContent.innerHTML = `
        <h3 style="color: var(--text-primary); margin-bottom: 24px; font-size: 20px;">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å</h3>
        
        <div style="margin-bottom: 20px;">
            <label style="display: block; color: var(--text-secondary); margin-bottom: 8px; font-size: 14px;">–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</label>
            <input type="text" id="status-name-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏" style="
                width: 100%;
                padding: 12px 16px;
                background: var(--bg-secondary);
                border: 1px solid var(--border-primary);
                border-radius: var(--radius-md);
                color: var(--text-primary);
                font-size: 14px;
            "/>
        </div>
        
        <div style="margin-bottom: 20px;">
            <label style="display: block; color: var(--text-secondary); margin-bottom: 8px; font-size: 14px;">–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <input type="text" id="status-description-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–µ–∫—Ç –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" style="
                width: 100%;
                padding: 12px 16px;
                background: var(--bg-secondary);
                border: 1px solid var(--border-primary);
                border-radius: var(--radius-md);
                color: var(--text-primary);
                font-size: 14px;
            "/>
        </div>
        
        <div style="margin-bottom: 20px;">
            <label style="display: block; color: var(--text-secondary); margin-bottom: 8px; font-size: 14px;">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É</label>
            <div id="status-icons" style="
                display: grid;
                grid-template-columns: repeat(8, 1fr);
                gap: 8px;
                margin-bottom: 16px;
            ">
                ${['üîß', '‚ö†Ô∏è', 'üîÑ', '‚è≥', 'üéØ', 'üî•', 'üíé', '‚≠ê', 'üöß', 'üìã', 'üîí', 'üìà', 'üé®', 'üß™', 'üì¶', 'üåü'].map(icon => `
                    <button type="button" class="status-icon-btn" data-icon="${icon}" style="
                        width: 48px;
                        height: 48px;
                        background: var(--bg-tertiary);
                        border: 2px solid transparent;
                        border-radius: var(--radius-md);
                        font-size: 24px;
                        cursor: pointer;
                        transition: var(--transition);
                    " onclick="selectStatusIcon(this)">${icon}</button>
                `).join('')}
            </div>
            <input type="text" id="custom-status-icon-input" placeholder="–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —ç–º–æ–¥–∑–∏" style="
                width: 100%;
                padding: 12px 16px;
                background: var(--bg-secondary);
                border: 1px solid var(--border-primary);
                border-radius: var(--radius-md);
                color: var(--text-primary);
                font-size: 14px;
            "/>
        </div>
        
        <div style="margin-bottom: 24px;">
            <label style="display: block; color: var(--text-secondary); margin-bottom: 8px; font-size: 14px;">–¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞</label>
            <div style="display: grid; grid-template-columns: repeat(6, 1fr); gap: 8px;">
                ${['#ef4444', '#f59e0b', '#10b981', '#3b82f6', '#8b5cf6', '#ec4899'].map(color => `
                    <button type="button" class="color-btn" data-color="${color}" style="
                        width: 48px;
                        height: 48px;
                        background: ${color};
                        border: 2px solid transparent;
                        border-radius: var(--radius-md);
                        cursor: pointer;
                        transition: var(--transition);
                    " onclick="selectStatusColor(this)"></button>
                `).join('')}
            </div>
        </div>
        
        <div style="display: flex; gap: 12px; justify-content: flex-end;">
            <button onclick="closeStatusModal()" style="
                padding: 10px 20px;
                background: var(--bg-tertiary);
                border: 1px solid var(--border-primary);
                border-radius: var(--radius-md);
                color: var(--text-primary);
                cursor: pointer;
                font-size: 14px;
            ">–û—Ç–º–µ–Ω–∞</button>
            <button onclick="saveNewStatus()" style="
                padding: 10px 20px;
                background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
                border: none;
                border-radius: var(--radius-md);
                color: white;
                cursor: pointer;
                font-size: 14px;
            ">–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å</button>
        </div>
    `;
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeStatusModal();
        }
    });
    
    window.currentStatusModal = modal;
    window.selectedStatusIcon = null;
    window.selectedStatusColor = '#3b82f6';
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
    setTimeout(() => {
        document.getElementById('status-name-input').focus();
    }, 100);
}

function selectStatusIcon(btn) {
    document.querySelectorAll('.status-icon-btn').forEach(b => {
        b.style.borderColor = 'transparent';
    });
    btn.style.borderColor = 'var(--accent-primary)';
    window.selectedStatusIcon = btn.dataset.icon;
    document.getElementById('custom-status-icon-input').value = '';
}

function selectStatusColor(btn) {
    document.querySelectorAll('.color-btn').forEach(b => {
        b.style.borderColor = 'transparent';
    });
    btn.style.borderColor = 'white';
    window.selectedStatusColor = btn.dataset.color;
}

function closeStatusModal() {
    if (window.currentStatusModal) {
        window.currentStatusModal.remove();
        window.currentStatusModal = null;
    }
}

function saveNewStatus() {
    const name = document.getElementById('status-name-input').value.trim();
    const description = document.getElementById('status-description-input').value.trim();
    const customIcon = document.getElementById('custom-status-icon-input').value.trim();
    const icon = customIcon || window.selectedStatusIcon || 'üìã';
    const color = window.selectedStatusColor || '#3b82f6';
    
    if (!name) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', 'error');
        return;
    }
    
    const newStatus = {
        id: 'custom-' + Date.now(),
        name: name,
        icon: icon,
        description: description || '–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
        color: color,
        bgColor: color + '20'
    };
    
    projectStatuses.push(newStatus);
    saveStatusesToLocalStorage();
    renderStatusSelector();
    closeStatusModal();
    showNotification('–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
}

function deleteStatus(statusId) {
    if (statusId === 'active' || statusId === 'coming-soon') {
        showNotification('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å', 'error');
        return;
    }
    
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å?')) {
        projectStatuses = projectStatuses.filter(s => s.id !== statusId);
        saveStatusesToLocalStorage();
        renderStatusSelector();
        showNotification('–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω', 'success');
    }
}

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê–ú–ò –í LOCALSTORAGE ---
function saveStatusesToLocalStorage() {
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (–Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
        const customStatuses = projectStatuses.filter(s => 
            s.id !== 'active' && s.id !== 'coming-soon'
        );
        localStorage.setItem('projectStatuses', JSON.stringify(customStatuses));
        console.log('–°—Ç–∞—Ç—É—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', customStatuses);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤', 'error');
    }
}

function loadStatusesFromLocalStorage() {
    try {
        const savedStatuses = localStorage.getItem('projectStatuses');
        if (savedStatuses) {
            const customStatuses = JSON.parse(savedStatuses);
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º
            projectStatuses = [
                ...projectStatuses.filter(s => s.id === 'active' || s.id === 'coming-soon'),
                ...customStatuses
            ];
            console.log('–°—Ç–∞—Ç—É—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', customStatuses);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    }
}

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò ---
function handleImageUpload(event) {
    const files = event.target.files;
    for (let file of files) {
        if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
                currentProjectImages.push(e.target.result);
                updateProjectImagesPreview();
            };
            reader.readAsDataURL(file);
        }
    }
}

function addImageFromURL() {
    const urlInput = document.getElementById('project-image-url');
    const url = urlInput.value.trim();
    
    if (url) {
        currentProjectImages.push(url);
        updateProjectImagesPreview();
        urlInput.value = '';
    }
}

function removeProjectImage(index) {
    currentProjectImages.splice(index, 1);
    updateProjectImagesPreview();
}

function updateProjectImagesPreview() {
    const preview = document.getElementById('project-images-preview');
    if (!preview) return;
    
    preview.innerHTML = '';
    
    currentProjectImages.forEach((image, index) => {
        const imageContainer = document.createElement('div');
        imageContainer.className = 'image-preview-item';
        imageContainer.innerHTML = `
            <img src="${image}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}">
            <button type="button" class="btn-remove-image" onclick="removeProjectImage(${index})">√ó</button>
        `;
        preview.appendChild(imageContainer);
    });
}

// Drag & Drop —Ñ—É–Ω–∫—Ü–∏–∏
function handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
}

function handleDragEnter(e) {
    e.preventDefault();
    e.stopPropagation();
    document.getElementById('image-dropzone').classList.add('dragover');
}

function handleDragLeave(e) {
    e.preventDefault();
    e.stopPropagation();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º—ã –ø–æ–∫–∏–Ω—É–ª–∏ dropzone
    if (!e.currentTarget.contains(e.relatedTarget)) {
        document.getElementById('image-dropzone').classList.remove('dragover');
    }
}

function handleImageDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    
    const dropzone = document.getElementById('image-dropzone');
    dropzone.classList.remove('dragover');
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
        processImageFiles(files);
    }
}

function processImageFiles(files) {
    Array.from(files).forEach(file => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if (!file.type.startsWith('image/')) {
            showNotification('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB)
        if (file.size > 10 * 1024 * 1024) {
            showNotification('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB', 'error');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º FileReader –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        const reader = new FileReader();
        reader.onload = function(e) {
            currentProjectImages.push(e.target.result);
            updateProjectImagesPreview();
            showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'success');
        };
        reader.readAsDataURL(file);
    });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ input
function handleImageUpload(event) {
    const files = event.target.files;
    if (files.length > 0) {
        processImageFiles(files);
    }
    // –û—á–∏—â–∞–µ–º input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
    event.target.value = '';
}

// --- –ù–û–í–´–ô –°–ï–õ–ï–ö–¢–û–† –°–¢–ê–¢–£–°–û–í ---
function initializeStatusSelector() {
    const statusOptions = document.querySelectorAll('.status-option-new');
    statusOptions.forEach(option => {
        option.addEventListener('click', function() {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –æ–ø—Ü–∏–π
            statusOptions.forEach(opt => opt.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
            this.classList.add('active');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            currentProjectStatus = this.getAttribute('data-status');
            
            console.log('–í—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å:', currentProjectStatus);
        });
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultStatus = document.querySelector('.status-option-new[data-status="active"]');
    if (defaultStatus) {
        defaultStatus.classList.add('active');
        currentProjectStatus = 'active';
    }
}

function setProjectStatus(status) {
    const statusOptions = document.querySelectorAll('.status-option-new');
    statusOptions.forEach(option => {
        option.classList.remove('active');
        if (option.getAttribute('data-status') === status) {
            option.classList.add('active');
        }
    });
    currentProjectStatus = status;
}

// --- –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï ---
let autoSaveTimer = null;
let lastSaveData = {};

function initializeAutoSave() {
    const autoSaveFields = [
        'project-title',
        'project-description', 
        'project-long-description',
        'project-link',
        'hero-title',
        'hero-description',
        'about-text1',
        'about-text2',
        'contact-email',
        'contact-phone',
        'contact-address'
    ];
    
    autoSaveFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.addEventListener('input', function() {
                scheduleAutoSave(fieldId, field.value);
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const savedValue = getAutoSavedValue(fieldId);
            if (savedValue && savedValue !== field.value) {
                showAutoSaveRestore(fieldId, savedValue);
            }
        }
    });
}

function scheduleAutoSave(fieldId, value) {
    clearTimeout(autoSaveTimer);
    
    autoSaveTimer = setTimeout(() => {
        saveFieldValue(fieldId, value);
        showAutoSaveIndicator();
    }, 1000); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—á–∞—Ç–∏
}

function saveFieldValue(fieldId, value) {
    const autoSaveData = JSON.parse(localStorage.getItem('autoSave') || '{}');
    autoSaveData[fieldId] = {
        value: value,
        timestamp: Date.now()
    };
    localStorage.setItem('autoSave', JSON.stringify(autoSaveData));
}

function getAutoSavedValue(fieldId) {
    const autoSaveData = JSON.parse(localStorage.getItem('autoSave') || '{}');
    const fieldData = autoSaveData[fieldId];
    
    if (fieldData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞—Ä—à–µ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
        const hoursSinceLastSave = (Date.now() - fieldData.timestamp) / (1000 * 60 * 60);
        if (hoursSinceLastSave < 24) {
            return fieldData.value;
        }
    }
    return null;
}

function showAutoSaveIndicator() {
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let indicator = document.getElementById('autosave-indicator');
    if (!indicator) {
        indicator = document.createElement('div');
        indicator.id = 'autosave-indicator';
        indicator.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            background: var(--accent-success);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            z-index: 10000;
            opacity: 0;
            transition: opacity 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        `;
        document.body.appendChild(indicator);
    }
    
    indicator.innerHTML = '<span>üíæ</span> –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
    indicator.style.opacity = '1';
    
    setTimeout(() => {
        indicator.style.opacity = '0';
    }, 2000);
}

function showAutoSaveRestore(fieldId, savedValue) {
    const field = document.getElementById(fieldId);
    if (!field) return;
    
    const restoreBtn = document.createElement('button');
    restoreBtn.className = 'autosave-restore-btn';
    restoreBtn.innerHTML = 'üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ';
    restoreBtn.style.cssText = `
        position: absolute;
        top: -30px;
        right: 0;
        background: var(--accent-warning);
        color: white;
        border: none;
        padding: 4px 8px;
        font-size: 11px;
        border-radius: 4px;
        cursor: pointer;
        z-index: 1000;
    `;
    
    restoreBtn.onclick = function() {
        field.value = savedValue;
        field.dispatchEvent(new Event('input'));
        restoreBtn.remove();
    };
    
    // –î–µ–ª–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º
    field.parentElement.style.position = 'relative';
    field.parentElement.appendChild(restoreBtn);
    
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (restoreBtn.parentElement) {
            restoreBtn.remove();
        }
    }, 10000);
}

// --- –ë–´–°–¢–†–´–ô –í–´–ë–û–† –¢–ï–•–ù–û–õ–û–ì–ò–ô ---
function initializeTechQuickSelect() {
    const container = document.getElementById('tech-quick-grid');
    if (!container) return;
    
    container.innerHTML = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    const popularTechs = presetTechnologies
        .filter(tech => ['HTML', 'CSS', 'JavaScript', 'React', 'Node.js', 'Python', 'MongoDB', 'Docker', 'Git', 'Figma', 'Photoshop', 'TypeScript'].includes(tech.name))
        .slice(0, 12);
    
    popularTechs.forEach(tech => {
        const techElement = document.createElement('div');
        techElement.className = 'tech-quick-item';
        techElement.innerHTML = `
            <span>${tech.icon}</span>
            <span>${tech.name}</span>
        `;
        
        techElement.addEventListener('click', function() {
            addTechFromPreset(tech);
        });
        
        container.appendChild(techElement);
    });
    
    updateTechQuickSelectState();
}

function addTechFromPreset(tech) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è
    const isAlreadyAdded = currentTechnologies.some(t => t.name === tech.name);
    if (isAlreadyAdded) {
        showNotification(`${tech.name} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'warning');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é
    currentTechnologies.push({
        name: tech.name,
        icon: tech.icon
    });
    
    displayTechnologies();
    updateTechQuickSelectState();
    showNotification(`${tech.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'success');
}

function updateTechQuickSelectState() {
    const quickItems = document.querySelectorAll('.tech-quick-item');
    quickItems.forEach(item => {
        const techName = item.querySelector('span:last-child').textContent;
        const isAdded = currentTechnologies.some(t => t.name === techName);
        
        if (isAdded) {
            item.classList.add('added');
        } else {
            item.classList.remove('added');
        }
    });
}

function addCustomTechnology() {
    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:');
    if (!name) return;
    
    const icon = prompt('–≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è üîß):') || 'üîß';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const isAlreadyAdded = currentTechnologies.some(t => t.name.toLowerCase() === name.toLowerCase());
    if (isAlreadyAdded) {
        showNotification(`${name} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'warning');
        return;
    }
    
    currentTechnologies.push({ name, icon });
    displayTechnologies();
    updateTechQuickSelectState();
    showNotification(`${name} –¥–æ–±–∞–≤–ª–µ–Ω–∞`, 'success');
}

function clearAllTechnologies() {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?')) {
        currentTechnologies = [];
        displayTechnologies();
        updateTechQuickSelectState();
        showNotification('–í—Å–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —É–¥–∞–ª–µ–Ω—ã', 'info');
    }
}

// --- –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ü–†–û–ï–ö–¢–ê ---
function previewProject() {
    const title = document.getElementById('project-title').value;
    const description = document.getElementById('project-description').value;
    const longDescription = document.getElementById('project-long-description').value;
    const link = document.getElementById('project-link').value;
    const category = document.getElementById('project-category').value;
    
    if (!title.trim()) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', 'warning');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const modal = document.createElement('div');
    modal.className = 'preview-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        backdrop-filter: blur(10px);
    `;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
    const statusText = getStatusDisplayText(currentProjectStatus);
    const statusColor = getStatusColor(currentProjectStatus);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏
    const tagsHTML = currentTags.length > 0 ? 
        currentTags.map(tag => `<span class="preview-tag">${tag}</span>`).join('') : 
        '<span class="preview-no-tags">–¢–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</span>';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    const techHTML = currentTechnologies.length > 0 ?
        currentTechnologies.map(tech => `
            <div class="preview-tech">
                <span>${tech.icon}</span>
                <span>${tech.name}</span>
            </div>
        `).join('') :
        '<span class="preview-no-tech">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</span>';
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const mainImage = currentProjectImages.length > 0 ? 
        currentProjectImages[0] : 
        'https://via.placeholder.com/400x250/1a1a1a/666?text=–ù–µ—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
    
    modal.innerHTML = `
        <div class="preview-content" style="
            background: linear-gradient(145deg, #1a1a1a 0%, #2d2d2d 50%, #1a1a1a 100%);
            border-radius: 20px;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            border: 1px solid rgba(121, 40, 202, 0.3);
            box-shadow: 0 40px 80px rgba(0, 0, 0, 0.8);
        ">
            <button onclick="closePreviewModal()" style="
                position: absolute;
                top: 15px;
                right: 15px;
                background: rgba(0, 0, 0, 0.8);
                color: white;
                border: none;
                border-radius: 50%;
                width: 35px;
                height: 35px;
                cursor: pointer;
                font-size: 18px;
                z-index: 10001;
                display: flex;
                align-items: center;
                justify-content: center;
            ">√ó</button>
            
            <div class="preview-image" style="
                width: 100%;
                height: 250px;
                background: url('${mainImage}') center/cover;
                border-radius: 20px 20px 0 0;
                position: relative;
            ">
                <div class="preview-status" style="
                    position: absolute;
                    top: 15px;
                    left: 15px;
                    background: ${statusColor};
                    color: white;
                    padding: 6px 12px;
                    border-radius: 15px;
                    font-size: 12px;
                    font-weight: 600;
                ">${statusText}</div>
            </div>
            
            <div class="preview-info" style="
                padding: 30px;
                color: white;
            ">
                <h2 style="
                    font-size: 24px;
                    font-weight: 700;
                    margin-bottom: 10px;
                    background: linear-gradient(135deg, #fff 0%, #e0e0e0 50%, #fff 100%);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    background-clip: text;
                ">${title}</h2>
                
                <div style="
                    display: inline-block;
                    background: rgba(121, 40, 202, 0.1);
                    color: rgba(121, 40, 202, 0.9);
                    padding: 4px 12px;
                    border-radius: 12px;
                    font-size: 12px;
                    margin-bottom: 15px;
                    border: 1px solid rgba(121, 40, 202, 0.3);
                ">${getCategoryDisplayName(category)}</div>
                
                <p style="
                    color: #e0e0e0;
                    line-height: 1.6;
                    margin-bottom: 20px;
                    font-size: 14px;
                ">${description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                
                ${longDescription ? `
                    <div style="margin-bottom: 20px;">
                        <h4 style="color: #fff; font-size: 16px; margin-bottom: 10px;">–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</h4>
                        <p style="color: #ccc; line-height: 1.6; font-size: 14px;">${longDescription}</p>
                    </div>
                ` : ''}
                
                <div style="margin-bottom: 20px;">
                    <h4 style="color: #fff; font-size: 16px; margin-bottom: 10px;">–¢–µ–≥–∏:</h4>
                    <div style="display: flex; flex-wrap: wrap; gap: 8px;">
                        ${tagsHTML}
                    </div>
                </div>
                
                <div style="margin-bottom: 25px;">
                    <h4 style="color: #fff; font-size: 16px; margin-bottom: 10px;">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</h4>
                    <div style="display: flex; flex-wrap: wrap; gap: 10px;">
                        ${techHTML}
                    </div>
                </div>
                
                <div style="
                    display: flex;
                    gap: 12px;
                    padding-top: 20px;
                    border-top: 1px solid rgba(255, 255, 255, 0.1);
                ">
                    ${link && link !== '#' && currentProjectStatus === 'active' ? `
                        <button style="
                            background: linear-gradient(135deg, #7928CA, #FF0080);
                            color: white;
                            border: none;
                            padding: 12px 20px;
                            border-radius: 25px;
                            font-weight: 600;
                            cursor: pointer;
                            flex: 1;
                        " onclick="window.open('${link}', '_blank')">
                            –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç
                        </button>
                    ` : `
                        <button style="
                            background: #333;
                            color: #888;
                            border: none;
                            padding: 12px 20px;
                            border-radius: 25px;
                            font-weight: 600;
                            cursor: not-allowed;
                            flex: 1;
                        " disabled>
                            ${statusText}
                        </button>
                    `}
                    <button onclick="closePreviewModal()" style="
                        background: rgba(255, 255, 255, 0.1);
                        color: white;
                        border: 1px solid rgba(255, 255, 255, 0.2);
                        padding: 12px 20px;
                        border-radius: 25px;
                        font-weight: 600;
                        cursor: pointer;
                        flex: 1;
                    ">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const style = document.createElement('style');
    style.textContent = `
        .preview-tag {
            background: linear-gradient(135deg, rgba(121, 40, 202, 0.3), rgba(255, 0, 128, 0.2));
            color: #E1BEE7;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            border: 1px solid rgba(121, 40, 202, 0.4);
        }
        
        .preview-no-tags, .preview-no-tech {
            color: #888;
            font-style: italic;
            font-size: 14px;
        }
        
        .preview-tech {
            display: flex;
            align-items: center;
            gap: 6px;
            background: rgba(255, 255, 255, 0.1);
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 13px;
            color: #fff;
        }
    `;
    
    document.head.appendChild(style);
    document.body.appendChild(modal);
    
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
    window.closePreviewModal = function() {
        modal.remove();
        style.remove();
        delete window.closePreviewModal;
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            window.closePreviewModal();
        }
    });
}

function getStatusDisplayText(status) {
    const statusMap = {
        'active': '‚úÖ –ì–æ—Ç–æ–≤',
        'coming-soon': 'üöÄ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        'paused': '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    };
    return statusMap[status] || '‚úÖ –ì–æ—Ç–æ–≤';
}

function getStatusColor(status) {
    const colorMap = {
        'active': '#10b981',
        'coming-soon': '#8b5cf6',
        'paused': '#f59e0b'
    };
    return colorMap[status] || '#10b981';
}

function getCategoryDisplayName(category) {
    const categoryMap = {
        'image': 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        'video': 'üé¨ –í–∏–¥–µ–æ',
        'web': 'üåê –í–µ–±-—Å–∞–π—Ç—ã',
        'app': 'üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    };
    return categoryMap[category] || category;
}

function updateImagePreview(imageUrl) {
    // –£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const preview = document.getElementById('image-preview');
    if (preview) {
        preview.innerHTML = imageUrl ? 
            `<img src="${imageUrl}" alt="–ü—Ä–µ–≤—å—é" style="max-width: 100%; height: auto;">` :
            '<p>–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>';
    }
}

// --- –ü–†–ï–î–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –¢–ï–•–ù–û–õ–û–ì–ò–ò ---
const presetTechnologies = [
    // Frontend
    { name: 'HTML', icon: 'üåê', category: 'frontend' },
    { name: 'CSS', icon: 'üé®', category: 'frontend' },
    { name: 'JavaScript', icon: '‚ö°', category: 'frontend' },
    { name: 'React', icon: '‚öõÔ∏è', category: 'frontend' },
    { name: 'Vue.js', icon: 'üíö', category: 'frontend' },
    { name: 'Angular', icon: 'üÖ∞Ô∏è', category: 'frontend' },
    { name: 'TypeScript', icon: 'üìò', category: 'frontend' },
    { name: 'Sass', icon: 'üíó', category: 'frontend' },
    { name: 'Tailwind', icon: 'üéØ', category: 'frontend' },
    
    // Backend
    { name: 'Node.js', icon: 'üü¢', category: 'backend' },
    { name: 'Python', icon: 'üêç', category: 'backend' },
    { name: 'PHP', icon: 'üêò', category: 'backend' },
    { name: 'Java', icon: '‚òï', category: 'backend' },
    { name: 'C#', icon: 'üíé', category: 'backend' },
    { name: 'Go', icon: 'üêπ', category: 'backend' },
    { name: 'Rust', icon: 'ü¶Ä', category: 'backend' },
    
    // Databases
    { name: 'MongoDB', icon: 'üçÉ', category: 'database' },
    { name: 'MySQL', icon: 'üê¨', category: 'database' },
    { name: 'PostgreSQL', icon: 'üêò', category: 'database' },
    { name: 'Redis', icon: 'üî¥', category: 'database' },
    { name: 'SQLite', icon: 'üíΩ', category: 'database' },
    
    // Mobile
    { name: 'React Native', icon: 'üì±', category: 'mobile' },
    { name: 'Flutter', icon: 'üíô', category: 'mobile' },
    { name: 'Swift', icon: 'üçé', category: 'mobile' },
    { name: 'Kotlin', icon: 'ü§ñ', category: 'mobile' },
    
    // Tools
    { name: 'Docker', icon: 'üê≥', category: 'tools' },
    { name: 'Git', icon: 'üìö', category: 'tools' },
    { name: 'Webpack', icon: 'üì¶', category: 'tools' },
    { name: 'Vite', icon: '‚ö°', category: 'tools' },
    { name: 'Firebase', icon: 'üî•', category: 'tools' },
    
    // Design & Creative
    { name: 'Figma', icon: 'üé®', category: 'design' },
    { name: 'Photoshop', icon: 'üñºÔ∏è', category: 'design' },
    { name: 'Blender', icon: 'üåÄ', category: 'design' },
    { name: 'After Effects', icon: '‚ú®', category: 'design' },
    
    // AI & ML
    { name: 'TensorFlow', icon: 'üß†', category: 'ai' },
    { name: 'PyTorch', icon: 'üî•', category: 'ai' },
    { name: 'OpenAI', icon: 'ü§ñ', category: 'ai' },
    { name: 'Stable Diffusion', icon: 'üåä', category: 'ai' }
];

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–•–ù–û–õ–û–ì–ò–ô ---
function initializeTechnologies() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (currentTechnologies.length === 0) {
        currentTechnologies = [
            { name: 'HTML', icon: 'üåê' },
            { name: 'CSS', icon: 'üé®' },
            { name: 'JavaScript', icon: '‚ö°' }
        ];
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä
    initializeTechQuickSelect();
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    displayTechnologies();
}

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–•–ù–û–õ–û–ì–ò–Ø–ú–ò ---
function addTechnology() {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    const modal = document.createElement('div');
    modal.className = 'tech-modal';
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        backdrop-filter: blur(10px);
    `;
    
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: var(--bg-card);
        border: 1px solid var(--border-primary);
        border-radius: var(--radius-lg);
        padding: 32px;
        max-width: 480px;
        width: 90%;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
    `;
    
    modalContent.innerHTML = `
        <h3 style="color: var(--text-primary); margin-bottom: 24px; font-size: 20px;">–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é</h3>
        
        <div style="margin-bottom: 20px;">
            <label style="display: block; color: var(--text-secondary); margin-bottom: 8px; font-size: 14px;">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</label>
            <input type="text" id="tech-name-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: React" style="
                width: 100%;
                padding: 12px 16px;
                background: var(--bg-secondary);
                border: 1px solid var(--border-primary);
                border-radius: var(--radius-md);
                color: var(--text-primary);
                font-size: 14px;
                transition: var(--transition);
            "/>
        </div>
        
        <div style="margin-bottom: 24px;">
            <label style="display: block; color: var(--text-secondary); margin-bottom: 8px; font-size: 14px;">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É</label>
            <div id="tech-icons" style="
                display: grid;
                grid-template-columns: repeat(8, 1fr);
                gap: 8px;
                margin-bottom: 16px;
            ">
                ${['‚öõÔ∏è', 'üî•', 'üåê', 'üì±', 'üé®', '‚ö°', 'üîß', 'üíé', 'üöÄ', 'üìä', 'üéØ', 'üíª', 'üåü', 'üîí', 'üì¶', 'üéÆ'].map(icon => `
                    <button type="button" class="icon-btn" data-icon="${icon}" style="
                        width: 48px;
                        height: 48px;
                        background: var(--bg-tertiary);
                        border: 2px solid transparent;
                        border-radius: var(--radius-md);
                        font-size: 24px;
                        cursor: pointer;
                        transition: var(--transition);
                    " onmouseover="this.style.borderColor='var(--accent-primary)'" 
                       onmouseout="this.style.borderColor='transparent'"
                       onclick="selectTechIcon(this)">${icon}</button>
                `).join('')}
            </div>
            <input type="text" id="custom-icon-input" placeholder="–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —ç–º–æ–¥–∑–∏" style="
                width: 100%;
                padding: 12px 16px;
                background: var(--bg-secondary);
                border: 1px solid var(--border-primary);
                border-radius: var(--radius-md);
                color: var(--text-primary);
                font-size: 14px;
            "/>
        </div>
        
        <div style="display: flex; gap: 12px; justify-content: flex-end;">
            <button onclick="closeTechModal()" style="
                padding: 10px 20px;
                background: var(--bg-tertiary);
                border: 1px solid var(--border-primary);
                border-radius: var(--radius-md);
                color: var(--text-primary);
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: var(--transition);
            ">–û—Ç–º–µ–Ω–∞</button>
            <button onclick="saveTechnology()" style="
                padding: 10px 20px;
                background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
                border: none;
                border-radius: var(--radius-md);
                color: white;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: var(--transition);
            ">–î–æ–±–∞–≤–∏—Ç—å</button>
        </div>
    `;
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
        document.getElementById('tech-name-input').focus();
    }, 100);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeTechModal();
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    window.currentTechModal = modal;
    window.selectedTechIcon = null;
}

function selectTechIcon(btn) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.icon-btn').forEach(b => {
        b.style.borderColor = 'transparent';
        b.style.background = 'var(--bg-tertiary)';
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    btn.style.borderColor = 'var(--accent-primary)';
    btn.style.background = 'var(--bg-hover)';
    window.selectedTechIcon = btn.dataset.icon;
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ custom icon
    document.getElementById('custom-icon-input').value = '';
}

function closeTechModal() {
    if (window.currentTechModal) {
        window.currentTechModal.remove();
        window.currentTechModal = null;
        window.selectedTechIcon = null;
    }
}

function saveTechnology() {
    const nameInput = document.getElementById('tech-name-input');
    const customIconInput = document.getElementById('custom-icon-input');
    
    const techName = nameInput.value.trim();
    const techIcon = customIconInput.value.trim() || window.selectedTechIcon || 'üîß';
    
    if (!techName) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'error');
        return;
    }
    
    currentTechnologies.push({ name: techName, icon: techIcon });
    displayTechnologies();
    closeTechModal();
    showNotification('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
}

function removeTechnology(index) {
    currentTechnologies.splice(index, 1);
    displayTechnologies();
    updateTechQuickSelectState();
}

function displayTechnologies() {
    const container = document.getElementById('tech-grid');
    if (!container) return;
    
    container.innerHTML = '';
    currentTechnologies.forEach((tech, index) => {
        const techEl = document.createElement('div');
        techEl.className = 'technology-item';
        techEl.style.cssText = `
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: var(--bg-tertiary);
            border: 1px solid var(--border-primary);
            border-radius: var(--radius-md);
            padding: 12px 16px;
            margin-bottom: 8px;
            transition: var(--transition);
        `;
        techEl.innerHTML = `
            <span style="display: flex; align-items: center; gap: 8px; color: var(--text-primary); font-weight: 500;">
                <span style="font-size: 20px;">${tech.icon}</span>
                <span>${tech.name}</span>
            </span>
            <button class="btn-remove" onclick="removeTechnology(${index})" style="
                background: var(--accent-error);
                color: white;
                border: none;
                border-radius: 50%;
                width: 24px;
                height: 24px;
                cursor: pointer;
                font-size: 14px;
                font-weight: bold;
                transition: var(--transition);
                display: flex;
                align-items: center;
                justify-content: center;
            " onmouseover="this.style.background='#dc2626'" onmouseout="this.style.background='var(--accent-error)'">√ó</button>
        `;
        container.appendChild(techEl);
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    if (currentTechnologies.length === 0) {
        const placeholder = document.createElement('div');
        placeholder.style.cssText = `
            text-align: center;
            padding: 24px;
            color: var(--text-secondary);
            font-style: italic;
            border: 2px dashed var(--border-primary);
            border-radius: var(--radius-md);
            background: rgba(255, 255, 255, 0.02);
        `;
        placeholder.innerHTML = `
            <div style="font-size: 32px; margin-bottom: 8px;">üîß</div>
            <div>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</div>
        `;
        container.appendChild(placeholder);
    }
}

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–ì–ê–ú–ò ---
let currentTags = [];

function focusTagInput() {
    const input = document.getElementById('tag-input');
    if (input) input.focus();
}

function handleTagInput(event) {
    if (event.key === 'Enter') {
        event.preventDefault();
        addTag();
    }
}

function addTag() {
    const input = document.getElementById('tag-input');
    if (input && input.value.trim()) {
        const tag = input.value.trim();
        if (!currentTags.includes(tag)) {
            currentTags.push(tag);
            displayTags();
        }
        input.value = '';
    }
}

function removeTag(tag) {
    currentTags = currentTags.filter(t => t !== tag);
    displayTags();
}

function displayTags() {
    const container = document.getElementById('tags-display');
    if (!container) return;
    
    container.innerHTML = '';
    
    if (currentTags.length === 0) {
        const placeholder = document.createElement('div');
        placeholder.style.cssText = `
            color: var(--text-secondary);
            font-style: italic;
            text-align: center;
            padding: 8px;
            width: 100%;
        `;
        placeholder.textContent = '–¢–µ–≥–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã';
        container.appendChild(placeholder);
        return;
    }
    
    currentTags.forEach(tag => {
        const tagEl = document.createElement('span');
        tagEl.className = 'tag';
        tagEl.style.cssText = `
            display: inline-flex;
            align-items: center;
            gap: 6px;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            box-shadow: 0 2px 8px rgba(99, 102, 241, 0.3);
        `;
        tagEl.innerHTML = `
            <span>${tag}</span>
            <button class="tag-remove" onclick="removeTag('${tag}')" style="
                background: rgba(255, 255, 255, 0.2);
                color: white;
                border: none;
                border-radius: 50%;
                width: 18px;
                height: 18px;
                cursor: pointer;
                font-size: 12px;
                font-weight: bold;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: var(--transition);
            " onmouseover="this.style.background='rgba(255, 255, 255, 0.3)'" onmouseout="this.style.background='rgba(255, 255, 255, 0.2)'">√ó</button>
        `;
        container.appendChild(tagEl);
    });
}

function clearTags() {
    currentTags = [];
    displayTags();
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
window.showSection = showSection;
window.saveGeneral = saveGeneral;
window.saveHero = saveHero;
window.saveAbout = saveAbout;
window.saveContact = saveContact;
window.saveFeatures = saveFeatures;
window.addProject = addProject;
window.editProject = editProject;
window.deleteProject = deleteProject;
window.saveProject = saveProject;
window.cancelProject = cancelProject;
window.cancelProjectEdit = cancelProject;
window.toggleFeature = toggleFeature;
window.toggleGradient = toggleGradient;
window.showNotification = showNotification;
window.addTechnology = addTechnology;
window.removeTechnology = removeTechnology;
window.displayTechnologies = displayTechnologies;
window.focusTagInput = focusTagInput;
window.handleTagInput = handleTagInput;
window.addTag = addTag;
window.removeTag = removeTag;
window.displayTags = displayTags;
window.clearTags = clearTags;
window.selectProjectStatus = selectProjectStatus;
window.updateImagePreview = updateImagePreview;
window.initializeTechnologies = initializeTechnologies;
window.handleImageUpload = handleImageUpload;
window.addImageFromURL = addImageFromURL;
window.removeProjectImage = removeProjectImage;
window.updateProjectImagesPreview = updateProjectImagesPreview;
window.selectTechIcon = selectTechIcon;
window.closeTechModal = closeTechModal;
window.saveTechnology = saveTechnology;
window.renderStatusSelector = renderStatusSelector;
window.createNewStatus = createNewStatus;
window.selectStatusIcon = selectStatusIcon;
window.selectStatusColor = selectStatusColor;
window.closeStatusModal = closeStatusModal;
window.saveNewStatus = saveNewStatus;
window.deleteStatus = deleteStatus;
window.getStatusName = getStatusName;

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
window.addFutureProject = addFutureProject;
window.editFutureProject = editFutureProject;
window.deleteFutureProject = deleteFutureProject;
window.saveFutureProject = saveFutureProject;
window.cancelFutureProject = cancelFutureProject;

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–¢–û–ß–ï–ö –ü–†–û–ï–ö–¢–û–í ---
function getStatusConfigAdmin(statusId) {
    // –ò—â–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
    const allStatuses = [...projectStatuses];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ localStorage
    try {
        const savedStatuses = localStorage.getItem('projectStatuses');
        if (savedStatuses) {
            const customStatuses = JSON.parse(savedStatuses);
            allStatuses.push(...customStatuses);
        }
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    }
    
    // –ò—â–µ–º —Å—Ç–∞—Ç—É—Å
    const status = allStatuses.find(s => s.id === statusId);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    return status || { 
        id: 'active', 
        name: '–ê–∫—Ç–∏–≤–µ–Ω', 
        icon: '‚úÖ', 
        color: '#10b981' 
    };
}

function getCategoryName(category) {
    const categories = {
        'web': '–°–∞–π—Ç',
        'app': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
        'image': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        'video': '–í–∏–¥–µ–æ',
        'design': '–î–∏–∑–∞–π–Ω'
    };
    return categories[category] || '–î—Ä—É–≥–æ–µ';
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.getStatusConfigAdmin = getStatusConfigAdmin;
window.getCategoryName = getCategoryName;